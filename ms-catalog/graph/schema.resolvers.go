package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"catalog/config"
	"catalog/graph/model"
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

// CreateCatalog is the resolver for the createCatalog field.
func (r *mutationResolver) CreateCatalog(ctx context.Context, input model.NewCatalog) (*model.Catalog, error) {
	catalog := model.Catalog{
		ID:          uuid.New().String(),
		Name:        input.Name,
		Description: input.Description,
		Stock:       input.Stock,
		Price:       input.Price,
		Image:       input.Image,
	}
	if err := config.DB.Create(&catalog).Error; err != nil {
		return nil, err
	}
	catalogJSON, err := json.Marshal(catalog)
	if err != nil {
		return nil, err
	}
	if err := config.PublishMessage(string(catalogJSON)); err != nil {
		return nil, err
	}
	return &catalog, nil
}

// Catalogs is the resolver for the catalogs field.
func (r *queryResolver) Catalogs(ctx context.Context) ([]*model.Catalog, error) {
	var catalogs []*model.Catalog
	if err := config.DB.Find(&catalogs).Error; err != nil {
		return nil, err
	}
	return catalogs, nil
}

// Catalog is the resolver for the catalog field.
func (r *queryResolver) Catalog(ctx context.Context, id string) (*model.Catalog, error) {
	var catalog model.Catalog
	if err := config.DB.Where("id = ?", id).First(&catalog).Error; err != nil {
		return nil, err
	}
	return &catalog, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
